Suggested policy for git commits

1. Commits should be done for completed features.

2. Messages should provide enough information to allow identification of what features are present in the build. Example:

	template - "Type of changes - what has been changed - how it has been changed - any additional info (optional)"
	example. - "Function - classnames - added example method to provide example.
		   Testing - ClassTests - test exampleTest created - passed."

3. Branching and Merging - 

	Regular Branches
	
	main - satble code ready for deployment
	
	develop - stable code that is being developed.
	
	Temp Branches
	
	When making branches, choose one of:
	
	feature - new functionality that is being added.
	refactor - reorganising, tidying or improving working code.
	bugfix - working on existing features bugs.
	experimental - anything goes, open playground that may or may not get merged back to develop.
	WIP - work in progress, may take some time.
	
	Naming branches:
	
	Some examples:
	
	1. Develop a feature of the server to allow full CRUD funtion:
	    - branch from develop and name the new branch:
		feature-server-CRUD-function
		
	2. Experiment with new technologies for secure login:
	   - branch from develop and name branch:
	   	experimental-secure-login
		
	3. Bug fix a feature
	   - branch from develop and name the new branch:
	   	bug-fix-<description of bug being fixed>
	
